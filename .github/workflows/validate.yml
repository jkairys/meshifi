name: Validate Project

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x

      - name: Install Docker
        uses: docker/setup-buildx-action@v3

      - name: Install Kind
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: meshifi-dev
          config: dev-environment/kind/kind-config.yaml

      - name: Install additional dependencies
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

          # Install Crossplane CLI
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/release-2.0/install.sh | sh
          sudo mv crossplane /usr/local/bin/crossplane

      - name: Set up development environment
        run: |
          cd dev-environment
          task setup
        env:
          CLUSTER_NAME: meshifi-dev

      - name: Set up kubectl context
        run: |
          # Set up kubectl to use the Kind cluster
          kubectl cluster-info --context kind-meshifi-dev
          kubectl config use-context kind-meshifi-dev

      - name: Verify cluster is running
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -A

      - name: Wait for Crossplane to be ready
        run: |
          echo "Waiting for Crossplane to be ready..."
          kubectl wait --for=condition=Available --timeout=300s deployment/crossplane -n crossplane-system
          kubectl wait --for=condition=Available --timeout=300s deployment/crossplane-rbac-manager -n crossplane-system

      - name: Install Crossplane functions
        run: |
          echo "Installing required Crossplane functions..."
          kubectl apply -f platform/core/functions.yaml
          echo "Waiting for functions to be ready..."
          kubectl wait --for=condition=Installed --timeout=300s function/crossplane-contrib-function-go-templating
          kubectl wait --for=condition=Installed --timeout=300s function/crossplane-contrib-function-auto-ready

      - name: Install and test platform
        run: |
          cd platform
          task install
          task test

      - name: Debug test failure
        if: failure()
        run: |
          echo "=== Test failed - debugging information ==="
          echo "=== DataDomain Status ==="
          kubectl get datadomain example-domain -o yaml || true
          echo ""
          echo "=== DataDomain Events ==="
          kubectl get events --field-selector involvedObject.name=example-domain --sort-by='.lastTimestamp' || true
          echo ""
          echo "=== DataProduct Status ==="
          kubectl get dataproduct sales-data -o yaml || true
          echo ""
          echo "=== DataProduct Events ==="
          kubectl get events --field-selector involvedObject.name=sales-data --sort-by='.lastTimestamp' || true
          echo ""
          echo "=== Crossplane Compositions ==="
          kubectl get compositions || true
          echo ""
          echo "=== Crossplane XRDs ==="
          kubectl get xrds || true
          echo ""
          echo "=== All Crossplane Resources ==="
          kubectl get managed,composite,composition -A || true

      - name: Clean up test resources
        if: always()
        run: |
          cd platform
          task cleanup-test || true

      - name: Show cluster status
        if: always()
        run: |
          echo "=== Cluster Status ==="
          kubectl get nodes
          echo ""
          echo "=== Crossplane Status ==="
          kubectl get pods -n crossplane-system || true
          echo ""
          echo "=== Meshifi Resources ==="
          kubectl get datadomains,dataproducts || true
          echo ""
          echo "=== DataDomain Details ==="
          kubectl describe datadomain example-domain || true
          echo ""
          echo "=== DataProduct Details ==="
          kubectl describe dataproduct sales-data || true
          echo ""
          echo "=== ConfigMaps ==="
          kubectl get configmaps -l meshifi.io/type || true
          echo ""
          echo "=== All ConfigMaps ==="
          kubectl get configmaps || true
          echo ""
          echo "=== Crossplane Events ==="
          kubectl get events --sort-by='.lastTimestamp' -A || true
          echo ""
          echo "=== All Namespaces ==="
          kubectl get namespaces

      - name: Clean up cluster
        if: always()
        run: |
          cd dev-environment
          task delete-cluster || true
