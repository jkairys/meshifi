version: "3"

tasks:
  install:
    desc: "Install the Meshifi platform"
    silent: true
    cmds:
      - task: install-package
        vars:
          PACKAGE: core

  uninstall:
    desc: "Uninstall the Meshifi platform"
    silent: true
    cmds:
      - task: uninstall-package
        vars:
          PACKAGE: core

  # Meshifi Package Installation
  install-package:
    desc: "Install the specified Meshifi package"
    silent: true
    requires:
      vars: [PACKAGE]
    cmds:
      - |
        PACKAGE="{{.PACKAGE}}"

        # Note: We'll install the package components directly instead of using a package definition
        echo "ℹ️  Installing Meshifi ${PACKAGE} package components directly..."

        # Apply the CRDs (idempotent)
        echo "📋 Applying CompositeResourceDefinitions..."
        kubectl apply -f {{.PACKAGE}}/xrds/

        # Apply the compositions (idempotent)
        echo "📋 Applying Compositions..."
        kubectl apply -f {{.PACKAGE}}/compositions/

  uninstall-package:
    silent: true
    requires:
      vars: [PACKAGE]
    desc: "Uninstall the Meshifi ${PACKAGE} package"
    cmds:
      - |
        echo "🗑️  Uninstalling Meshifi ${PACKAGE} package..."

        # Delete compositions
        echo "🗑️  Removing compositions..."
        kubectl delete -f {{.PACKAGE}}/compositions/ --ignore-not-found=true

        # Delete CRDs
        echo "🗑️  Removing CompositeResourceDefinitions..."
        kubectl delete -f {{.PACKAGE}}/xrds/ --ignore-not-found=true

        echo "✅ Meshifi {{.PACKAGE}} package uninstalled"

  # Testing
  test:
    desc: "Test the Meshifi package with example resources"
    silent: true
    deps: [install]
    cmds:
      - |
        echo "🧪 Testing Meshifi package with example resources..."

        # Apply example data domain
        echo "📋 Creating example DataDomain..."
        kubectl apply -f examples/data-domain.yaml


        # Wait for resources to be ready
        echo "⏳ Waiting for resources to be ready..."
        kubectl wait --for=condition=Ready --timeout=60s datadomain/example-domain

        # Show status
        echo "✅ Test resources created successfully!"
        echo ""
        echo "📋 DataDomain status:"
        kubectl get datadomain example-domain -o yaml
        echo ""
        echo "📋 Created ConfigMaps:"
        kubectl get configmaps -l meshifi.io/type
    summary: "Test the package by creating example resources"

  cleanup-test:
    desc: "Clean up test resources"
    silent: true
    cmds:
      - |
        echo "🧹 Cleaning up test resources..."
        kubectl delete -f examples/ --ignore-not-found=true
        echo "✅ Test resources cleaned up"

  # Help
  help:
    desc: "Show available Meshifi package tasks"
    cmds:
      - task --list
