apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: gcp-data-domain-composition
spec:
  compositeTypeRef:
    apiVersion: meshifi.io/v1alpha1
    kind: DataDomain
  mode: Pipeline
  pipeline:
    - step: create-storage-bucket
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- if .observed.composite.resource.spec.gcp.resources }}
            {{- range .observed.composite.resource.spec.gcp.resources }}
            {{- if eq .type "storage" }}
            ---
            apiVersion: storage.gcp.upbound.io/v1beta1
            kind: Bucket
            metadata:
              name: "{{ .name }}"
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .name }}"
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                meshifi.io/data-domain: "{{ $.observed.composite.resource.metadata.name }}"
                meshifi.io/resource-type: "storage"
            spec:
              forProvider:
                location: "{{ .config.location | default "US" }}"
                storageClass: "{{ .config.storageClass | default "STANDARD" }}"
                uniformBucketLevelAccess: true
                versioning:
                  enabled: false
                lifecycleRule:
                  - action:
                      type: Delete
                    condition:
                      age: 365
              providerConfigRef:
                name: default
            {{- end }}
            {{- end }}
            {{- end }}
    - step: create-bigquery-dataset
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- if .observed.composite.resource.spec.gcp.resources }}
            {{- range .observed.composite.resource.spec.gcp.resources }}
            {{- if eq .type "bigquery" }}
            ---
            apiVersion: bigquery.gcp.upbound.io/v1beta1
            kind: Dataset
            metadata:
              name: "{{ .name }}"
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .name }}"
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                meshifi.io/data-domain: "{{ $.observed.composite.resource.metadata.name }}"
                meshifi.io/resource-type: "bigquery"
            spec:
              forProvider:
                datasetId: "{{ .name }}"
                description: "{{ .config.description | default "Dataset for data domain" }}"
                location: "{{ .config.location | default "US" }}"
                project: "{{ $.observed.composite.resource.spec.gcp.projectId }}"
                access:
                  - role: "OWNER"
                    specialGroup: "projectOwners"
                  - role: "WRITER"
                    specialGroup: "projectWriters"
              providerConfigRef:
                name: default
            {{- end }}
            {{- end }}
            {{- end }}
    - step: create-compute-instance
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{- if .observed.composite.resource.spec.gcp.resources }}
            {{- range .observed.composite.resource.spec.gcp.resources }}
            {{- if eq .type "compute" }}
            ---
            apiVersion: compute.gcp.upbound.io/v1beta1
            kind: Instance
            metadata:
              name: "{{ .name }}"
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "{{ .name }}"
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                meshifi.io/data-domain: "{{ $.observed.composite.resource.metadata.name }}"
                meshifi.io/resource-type: "compute"
            spec:
              forProvider:
                name: "{{ .name }}"
                machineType: "{{ .config.machineType | default "e2-medium" }}"
                zone: "{{ .config.zone | default "us-central1-a" }}"
                project: "{{ $.observed.composite.resource.spec.gcp.projectId }}"
                bootDisk:
                  - initializeParams:
                      - image: "{{ .config.image | default "projects/debian-cloud/global/images/family/debian-11" }}"
                    autoDelete: true
                networkInterface:
                  - network: "default"
                    accessConfig:
                      - networkTier: "PREMIUM"
                serviceAccount:
                  - scopes:
                      - "https://www.googleapis.com/auth/cloud-platform"
                tags:
                  - "meshifi-data-domain"
                  - "{{ $.observed.composite.resource.metadata.name }}"
              providerConfigRef:
                name: default
            {{- end }}
            {{- end }}
            {{- end }}
    - step: create-configmap
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: "{{ .observed.composite.resource.metadata.name }}-gcp-config"
              namespace: "{{ .observed.composite.resource.metadata.namespace }}"
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: configmap
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                meshifi.io/data-domain: "{{ .observed.composite.resource.metadata.name }}"
                meshifi.io/provider: "gcp"
            data:
              description: "{{ .observed.composite.resource.spec.description }}"
              owner: "{{ .observed.composite.resource.spec.owner }}"
              version: "{{ .observed.composite.resource.spec.metadata.version }}"
              createdBy: "{{ .observed.composite.resource.spec.metadata.createdBy }}"
              tags: "{{ .observed.composite.resource.spec.tags | join "," }}"
              gcpProjectId: "{{ .observed.composite.resource.spec.gcp.projectId }}"
              gcpRegion: "{{ .observed.composite.resource.spec.gcp.region }}"
              resources: "{{ .observed.composite.resource.spec.gcp.resources | toJson }}"
    - step: automatically-detect-readiness
      functionRef:
        name: crossplane-contrib-function-auto-ready
