apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: data-domain-composition
spec:
  compositeTypeRef:
    apiVersion: meshifi.io/v1alpha1
    kind: DataDomain
  mode: Pipeline
  pipeline:
    - step: create-configmap
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: "{{ .observed.composite.resource.metadata.name }}-config"
              namespace: "{{ .observed.composite.resource.metadata.namespace }}"
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: configmap
                gotemplating.fn.crossplane.io/ready: "True"
              labels:
                example.crossplane.io/app: "{{ .observed.composite.resource.metadata.name }}"
                meshifi.io/data-domain: "{{ .observed.composite.resource.metadata.name }}"
                name: "{{ .observed.composite.resource.metadata.name }}"
            data:
              description: "{{ .observed.composite.resource.spec.description }}"
              owner: "{{ .observed.composite.resource.spec.owner }}"
              version: "{{ .observed.composite.resource.spec.metadata.version }}"
              createdBy: "{{ .observed.composite.resource.spec.metadata.createdBy }}"
              tags: "{{ .observed.composite.resource.spec.tags | join "," }}"
    - step: automatically-detect-readiness
      functionRef:
        name: crossplane-contrib-function-auto-ready
