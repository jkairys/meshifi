version: '3'

vars:
  CLUSTER_NAME: meshifi-dev
  KIND_VERSION: v0.20.0
  CROSSPLANE_VERSION: v1.14.0
  KUBECTL_VERSION: v1.28.0

tasks:
  # Development Environment Setup
  setup:
    desc: "Set up the development environment"
    deps: [install-deps, create-cluster, install-crossplane]
    summary: |
      Complete development environment setup including:
      - Dependency installation
      - Kind cluster creation
      - Crossplane installation
      - Basic configuration

  install-deps:
    desc: "Install all required dependencies"
    cmds:
      - task: install-deps-macos
      - task: install-deps-linux
      - task: install-task
    summary: "Install Docker, Kind, kubectl, Helm, and Task"

  install-deps-macos:
    desc: "Install dependencies on macOS"
    cmds:
      - |
        if [[ "$OSTYPE" == "darwin"* ]]; then
          echo "📱 Detected macOS"
          
          # Check if Homebrew is installed
          if ! command -v brew &> /dev/null; then
            echo "❌ Homebrew is not installed. Please install it first:"
            echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
            exit 1
          fi
          
          # Install required tools
          echo "📦 Installing required tools via Homebrew..."
          brew install kind kubectl helm docker
        else
          echo "ℹ️  Skipping macOS installation (not on macOS)"
        fi

  install-deps-linux:
    desc: "Install dependencies on Linux"
    cmds:
      - |
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
          echo "🐧 Detected Linux"
          
          # Install kubectl
          if ! command -v kubectl &> /dev/null; then
            echo "📦 Installing kubectl..."
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          
          # Install Kind
          if ! command -v kind &> /dev/null; then
            echo "📦 Installing Kind..."
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
          fi
          
          # Install Helm
          if ! command -v helm &> /dev/null; then
            echo "📦 Installing Helm..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi
          
          # Check Docker
          if ! command -v docker &> /dev/null; then
            echo "❌ Docker is not installed. Please install Docker first:"
            echo "   https://docs.docker.com/engine/install/"
            exit 1
          fi
        else
          echo "ℹ️  Skipping Linux installation (not on Linux)"
        fi

  install-task:
    desc: "Install Task if not already installed"
    cmds:
      - |
        if ! command -v task &> /dev/null; then
          echo "📦 Installing Task..."
          if [[ "$OSTYPE" == "darwin"* ]]; then
            brew install go-task/tap/go-task
          else
            sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          fi
        else
          echo "✅ Task is already installed"
        fi

  check-deps:
    desc: "Check if required dependencies are installed"
    cmds:
      - task: check-kind
      - task: check-kubectl
      - task: check-docker
    summary: "Verify all required tools are available"

  check-kind:
    desc: "Check if Kind is installed"
    cmds:
      - |
        if ! command -v kind &> /dev/null; then
          echo "❌ Kind is not installed. Please install it first:"
          echo "   brew install kind"
          echo "   or visit: https://kind.sigs.k8s.io/docs/user/quick-start/#installation"
          exit 1
        else
          echo "✅ Kind is installed: $(kind version)"
        fi

  check-kubectl:
    desc: "Check if kubectl is installed"
    cmds:
      - |
        if ! command -v kubectl &> /dev/null; then
          echo "❌ kubectl is not installed. Please install it first:"
          echo "   brew install kubectl"
          echo "   or visit: https://kubernetes.io/docs/tasks/tools/"
          exit 1
        else
          echo "✅ kubectl is installed: $(kubectl version --client --short)"
        fi

  check-docker:
    desc: "Check if Docker is running"
    cmds:
      - |
        if ! docker info &> /dev/null; then
          echo "❌ Docker is not running. Please start Docker first."
          exit 1
        else
          echo "✅ Docker is running"
        fi

  # Kind Cluster Management
  create-cluster:
    desc: "Create a Kind cluster for development"
    cmds:
      - task: check-kind
      - |
        if kind get clusters | grep -q "{{.CLUSTER_NAME}}"; then
          echo "✅ Kind cluster '{{.CLUSTER_NAME}}' already exists"
        else
          echo "🚀 Creating Kind cluster '{{.CLUSTER_NAME}}'..."
          kind create cluster --name {{.CLUSTER_NAME}} --config=./kind-config.yaml
          echo "✅ Kind cluster created successfully"
        fi
    summary: "Create or verify Kind cluster exists"

  delete-cluster:
    desc: "Delete the Kind cluster"
    cmds:
      - |
        if kind get clusters | grep -q "{{.CLUSTER_NAME}}"; then
          echo "🗑️  Deleting Kind cluster '{{.CLUSTER_NAME}}'..."
          kind delete cluster --name {{.CLUSTER_NAME}}
          echo "✅ Kind cluster deleted"
        else
          echo "ℹ️  Kind cluster '{{.CLUSTER_NAME}}' does not exist"
        fi

  cluster-info:
    desc: "Show cluster information"
    cmds:
      - kubectl cluster-info
      - kubectl get nodes
      - kubectl get pods --all-namespaces

  # Crossplane Management
  install-crossplane:
    desc: "Install Crossplane on the Kind cluster"
    deps: [create-cluster]
    cmds:
      - |
        echo "🚀 Installing Crossplane..."
        helm repo add crossplane-stable https://charts.crossplane.io/stable
        helm repo update
        helm install crossplane crossplane-stable/crossplane \
          --namespace crossplane-system \
          --create-namespace \
          --version {{.CROSSPLANE_VERSION}}
        echo "⏳ Waiting for Crossplane to be ready..."
        kubectl wait --for=condition=Available --timeout=300s deployment/crossplane -n crossplane-system
        echo "✅ Crossplane installed successfully"
    summary: "Install Crossplane using Helm"

  uninstall-crossplane:
    desc: "Uninstall Crossplane from the cluster"
    cmds:
      - |
        echo "🗑️  Uninstalling Crossplane..."
        helm uninstall crossplane -n crossplane-system
        kubectl delete namespace crossplane-system
        echo "✅ Crossplane uninstalled"

  crossplane-status:
    desc: "Check Crossplane status"
    cmds:
      - kubectl get pods -n crossplane-system
      - kubectl get crd | grep crossplane

  # Development Workflow
  dev:
    desc: "Start development environment"
    deps: [setup]
    cmds:
      - echo "🎉 Development environment is ready!"
      - echo "📋 Available commands:"
      - echo "   task cluster-info    - Show cluster information"
      - echo "   task crossplane-status - Check Crossplane status"
      - echo "   task logs           - Show Crossplane logs"
      - echo "   task clean          - Clean up everything"

  setup-dev:
    desc: "Complete development environment setup (replaces setup-dev.sh)"
    deps: [setup]
    cmds:
      - echo "🚀 Setting up Meshifi development environment..."
      - echo "📋 Running complete setup..."
      - task: setup
      - echo ""
      - echo "🎉 Development environment is ready!"
      - echo ""
      - echo "📋 Available commands:"
      - echo "  task dev              - Start development"
      - echo "  task cluster-info     - Show cluster information"
      - echo "  task crossplane-status - Check Crossplane status"
      - echo "  task logs             - Show Crossplane logs"
      - echo "  task clean            - Clean up everything"
      - echo ""
      - echo "📖 For more information, see docs/DEVELOPMENT.md"

  logs:
    desc: "Show Crossplane logs"
    cmds:
      - kubectl logs -n crossplane-system -l app=crossplane --tail=50

  # Cleanup
  clean:
    desc: "Clean up development environment"
    cmds:
      - task: uninstall-crossplane
      - task: delete-cluster
    summary: "Remove cluster and all components"

  # Utility tasks
  kubeconfig:
    desc: "Show kubeconfig for the Kind cluster"
    cmds:
      - kind get kubeconfig --name {{.CLUSTER_NAME}}

  port-forward:
    desc: "Port forward Crossplane API server (for debugging)"
    cmds:
      - kubectl port-forward -n crossplane-system svc/crossplane 8080:8080

  # Help
  help:
    desc: "Show available tasks"
    cmds:
      - task --list
